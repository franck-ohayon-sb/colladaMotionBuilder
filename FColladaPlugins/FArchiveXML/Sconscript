# Generic Sconscript for folders containing code files.
import os
relPath = "../../../../FArchiveXML/"
execfile(relPath + "../../SconsCommon.py")

# Create the Environment which creates the compile and linker command lines.
env = Environment()
ifdebug = ARGUMENTS.get('debug', 0)
ifunicode = ARGUMENTS.get('unicode', 0)
ifshared = ARGUMENTS.get('shared', 0)

# Add the compiler and linker flags and include search path
# Keep in mind that ../../../../FArchiveXML is the current folder.
env.Append(CPPPATH = [relPath + '../../FCollada', relPath + '../../FCollada/LibXML/include'])

# Add the macros defined for all the builds
env.Append(CPPDEFINES = ['LINUX'])
env.Append(CCFLAGS = ['-W', '-Wall', '-Wno-unused-parameter', '-Wno-unused-function'])
if int(ifshared): env.Append(CPPDEFINES = ['FCOLLADA_DLL'])

# Add the macros and flags defined only for DEBUG, RETAIL or UNICODE
if int(ifdebug):
    env.Append(CPPDEFINES = ['_DEBUG'])
    env.Append(CCFLAGS = ['-O0', '-g'])
else:
    env.Append(CPPDEFINES = ['NDEBUG', 'RETAIL'])
    env.Append(CCFLAGS = ['-O2'])
if int(ifunicode):
    env.Append(CPPDEFINES = ['UNICODE'])

# List of the source code to compile, and make a library out of it
fileList = []
FileListAppend(fileList, relPath, "", "cpp")

libraryName = "FArchiveXML_"
if int(ifshared) == 0: libraryName += "S"
if int(ifunicode) != 0: libraryName += "U"
if int(ifdebug) != 0: libraryName += "D"
else: libraryName += "R"

# Always do a static library to be bundled with FCollada.
FArchiveXML = env.StaticLibrary(libraryName, fileList)
 
# Specifying the name and directory of output library
env.Install('../../', FArchiveXML)

